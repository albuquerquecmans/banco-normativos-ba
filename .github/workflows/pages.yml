name: Build & Deploy Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write        # <— precisa ser write para commitar de volta
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build site + generate norms.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _site data .cache

          echo ">> Conteudo da pasta data/ antes:"
          ls -la data || true

          PLANILHA="data/Normativas_Beneficios_Assistenciais_CGRAN.xlsx"
          JSON="data/norms.json"

          if [[ -f "$PLANILHA" ]]; then
            echo ">> Planilha encontrada. Ingerindo via CLI..."
            python -m bpa.cli ingest "$PLANILHA" --out-json "$JSON" || true
          else
            echo ">> Planilha NAO encontrada em $PLANILHA"
          fi

          # fallback SEMPRE roda para garantir o arquivo
          if [[ ! -f "$JSON" ]]; then
            echo ">> Gerando via fallback..."
            python scripts/ci_fallback_ingest.py || true
          fi

          # ultimo recurso: garante um JSON válido (evita quebrar o deploy)
          if [[ ! -f "$JSON" ]]; then
            echo "[]">"$JSON"
            echo ">> ATENCAO: norms.json vazio criado (nenhum dado ingerido)."
          fi

          echo ">> Preview do JSON:"
          python - <<'PY'
import json, os
p="data/norms.json"
print("existe?", os.path.exists(p))
d=json.load(open(p,encoding="utf-8"))
print("registros=", len(d))
print("primeiros=", [ (r.get('identificacao') or r.get('slug') or '')[:80] for r in d[:5] ])
PY

          echo ">> Publicando..."
          python -m bpa.cli publish --out _site --sqlite _site/bpc_normativos.sqlite || true
          python - <<'PY'
from bpa.publish.emit_site import build_site
build_site('data/norms.json','_site')
print("build_site OK")
PY
          : > _site/.nojekyll

      - name: Commit generated data back to main
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "data: atualiza norms.json (build)"
          file_pattern: "data/norms.json .cache/*.json"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
